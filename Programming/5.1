#include <iostream>

using namespace std;

template <typename T>
class betterStack {
public:
    betterStack() {
        prev = 0;
    }
    betterStack(T newData, betterStack* newPrev) {
        data = newData;
        prev = newPrev;
    }
    betterStack(betterStack* newStack) {
        int buffSize = newStack->size();
        betterStack* oldcurrent = newStack;
        for (int i = 0; i < buffSize; i++) {
            this->push(oldcurrent->data);
            oldcurrent = oldcurrent->prev;
        }
    }

    void push(T newData) {
        betterStack* buff = new betterStack(data, prev);
        data = newData;
        prev = buff;
    }
    void pop() {
            betterStack* buff = prev->prev;
            data = prev->data;
            delete prev;
            prev = buff;
    }
    int size() {
        return size(0) - 1;
    }
    T top() {
        return data;
    }
private:
    int size(int step) {
        if (prev == 0) {
            return step + 1;
        }
        else {
            return prev->size(step + 1);
        }
    }
    T data;
    betterStack* prev;
};

int main()
{
    betterStack<float> stack, buff;

    for (int i = 0; i < 20; i++) {
        stack.push(rand()%20 - 10);
    }
    
    for (int i = 0; i < 20; i++) {
        if (stack.top() < 2 or stack.top() > 5) buff.push(stack.top());
        if (stack.top() < 0) buff.push(1.5);
        stack.pop();
    }

    int buffSize = buff.size();
    for (int i = 0; i < buffSize; i++) {
        stack.push(buff.top());
        buff.pop();
    }

    buffSize = stack.size();
    for (int i = 0; i < buffSize; i++) {
        cout << stack.top() << endl;
        stack.pop();
    }
}
